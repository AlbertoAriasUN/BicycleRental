/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package interfaces;

import java.util.ArrayList;
import java.util.logging.*;
import model.Client;
import model.Reservation;
import logic.*;
import logs.FinalFilter;

/**
 *
 * @author maciex
 */
public class GuiReservation extends javax.swing.JFrame {
    
    Logger logger = Logger.getLogger( Gui.class.getName() );
    static private RecordManager<Reservation> reservations; 
    int TABLE_MAX_SIZE = 25;
    int TABLE_COLUMNS = 7;
    int MODE = 0;
    /**
     * Creates new form GuiReservation
     */
    public GuiReservation( RecordManager<Reservation> reservations ) {
        logger.setFilter(FinalFilter.getInstance());
        logger.addHandler(logs.Handler.getHandler());
        logger.log(Level.INFO, "Creating frame \n ========================= \n");
        this.reservations = reservations;
        initComponents();
        printListReservation(reservations.printAll(), table);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        comboReserv = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Id rezerwacji", "Data rozpoczęcia", "Data zakończenia", "Id roweru", "Id klienta", "Cena usługi", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(5).setResizable(false);
        }

        btnRefresh.setText("Odśwież");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnDelete.setText("Anuluj");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnConfirm.setText("Potwierdź");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        comboReserv.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Wszystkie", "Tylko aktywne", "Archiwalne" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(btnConfirm))
                            .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboReserv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(btnRefresh)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefresh)
                    .addComponent(btnDelete)
                    .addComponent(btnConfirm)
                    .addComponent(comboReserv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        String mode = comboReserv.getSelectedItem().toString();
        switch(mode){
            case "Wszystkie":
                MODE = 0;
                break;
            case "Tylko aktywne":
                MODE = 2;
                break;
            case "Archiwalne":
                MODE = 1;
                break;
        }
        nullTable( table, TABLE_COLUMNS );
        printListReservation(reservations.printAll(), table);
        updateStatus();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int row = table.getSelectedRow();
        int rid = Integer.parseInt(table.getValueAt(row, 0).toString());
        Reservation r = reservations.get(rid);
        r.annualReservation();
        //reservations.delete(rid);
        nullTable( table, TABLE_COLUMNS );
        printListReservation(reservations.printAll(), table);
        new GuiReservationDelete(r).setVisible(true);
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
         int row = table.getSelectedRow();
        int rid = Integer.parseInt(table.getValueAt(row, 0).toString());
        Reservation r = reservations.get(rid);
        r.confirmReservation();
    }//GEN-LAST:event_btnConfirmActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiReservation( reservations ).setVisible(true);
            }
        });
    }
    
    private void print( Reservation r , int row , javax.swing.JTable table ){   
            String[] info = r.getAllInfo();
            System.out.println(row);
            for ( int i = 0 ; i < info.length ; i++ ){
                table.setValueAt(info[i], row, i);
            }
        }
        
  private void printListReservation( ArrayList <Reservation> list , javax.swing.JTable table ){
            int j = 0;
            for (int i = 0 ; i < list.size() ; i ++){
                switch(MODE){
                    case 0:
                        print( list.get(i) , j , table );
                        j++;
                        break;
                    case 1:
                        if ( list.get(i).getState() == "Anulowano" || list.get(i).getState() == "Zakończono" ){
                            print( list.get(i) , j , table );
                            j++;
                        }
                        break;
                    case 2:
                        if ( list.get(i).getState() != "Anulowano" && list.get(i).getState() != "Zakończono" ){
                            print( list.get(i) , j , table );
                            j++;
                        }
                        break;
                }
            }
        }
  
  private void nullTable ( javax.swing.JTable table , int numberOfColumns ){
    	for (int i = 0 ; i < TABLE_MAX_SIZE ; i ++ ){
    		for (int j = 0 ; j < numberOfColumns ; j ++ ){
    			table.setValueAt(" ", i, j);
    		}
    	}	
    }
  
  private void updateStatus(){
      System.out.println(reservations.size());
        for ( int i = 1 ; i <= reservations.size() ; i ++ ){
            reservations.get(i).updateStatus();
        } 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox comboReserv;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
